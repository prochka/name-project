<?php
 header("Content-type: application/json"); session_start(); set_time_limit(100); class GetUserNewMess{ private $user_id; public function __construct($user_id){ $this->user_id = intval($user_id); require 'mysql.php'; } public function getNewMessages(){ $mysql = Mysql::getInstance(); for($i=0; $i<=25; $i++){ if(connection_status() != 0) { session_write_close(); exit; } $mysql->exec("LOCK TABLES ok_messages WRITE, ok_users_chat WRITE, ok_url WRITE"); $sql = "SELECT * FROM ok_users_chat WHERE id_user = {$this->user_id}"; $result = $mysql->query($sql); if($result->rowCount() == 0){ $messages['chat_init'] = 'del'; echo json_encode($messages); $mysql->exec("UNLOCK TABLES"); exit; } $res_array = $result->fetch(PDO::FETCH_ASSOC); if($res_array['new_message_operator'] != 0){ $new_mess = $res_array['new_message_operator']; $sql = "SELECT wr_date, messages FROM ok_messages WHERE id_user = {$this->user_id} AND is_from = '2' ORDER BY wr_date DESC LIMIT {$new_mess}"; session_start(); $_SESSION['operator_write'] = 0; $result = $mysql->query($sql); if($result->rowCount() != 0){ $messages = $result->fetchAll(PDO::FETCH_ASSOC); for($i = 0; $i < count($messages); $i++){ $messages[$i]['wr_date'] = date("H:i:s", $messages[$i]['wr_date']); } $messages = array_reverse($messages); echo json_encode($messages); $this->updateNew(); $mysql->exec("UNLOCK TABLES"); exit; } }elseif($res_array['write_operator'] == '1'){ if($_SESSION['operator_write'] == 0){ session_start(); $_SESSION['operator_write'] = 1; $messages['write'] = 1; echo json_encode($messages); $mysql->exec("UNLOCK TABLES"); exit; } }elseif($res_array['write_operator'] == '2'){ $messages['write'] = 2; $sql = "SELECT * FROM ok_url WHERE id_user = {$this->user_id}"; $result = $mysql->query($sql); $r_arr = $result->fetch(2); $messages['url'] = $r_arr['url']; echo json_encode($messages); $sql = "UPDATE ok_users_chat SET write_operator = '0' WHERE id_user = {$this->user_id}"; $mysql->exec($sql); $sql = "DELETE FROM ok_url WHERE id_user = {$this->user_id}"; $mysql->exec($sql); $mysql->exec("UNLOCK TABLES"); exit; }elseif($res_array['id_operator'] == 0){ $mysql = Mysql::getInstance(); $sql = "DELETE FROM ok_users_chat WHERE id_user = {$this->user_id}"; $mysql->exec($sql); $messages['black_list'] = 1; echo json_encode($messages); $mysql->exec("UNLOCK TABLES"); exit; } $mysql->exec("UNLOCK TABLES"); if($_SESSION['ok_conn_operator'] != $res_array['id_operator']){ if($operator = $this->setNewOperator($res_array['id_operator'])){ session_start(); $operator['new_operator'] = 1; $_SESSION['ok_conn_operator'] = $res_array['id_operator']; echo json_encode($operator); } exit; } if($res_array['write_operator'] == '0' AND $_SESSION['operator_write'] == 1){ session_start(); $_SESSION['operator_write'] = 0; exit; } sleep(2); } exit; } private function updateNew(){ $sql = "UPDATE ok_users_chat SET new_message_operator = '0' WHERE id_user = {$this->user_id}"; $mysql = Mysql::getInstance(); $mysql->exec($sql); } private function setNewOperator($operator_id){ $mysql = Mysql::getInstance(); $sql = "SELECT ok_operators.operator_id, ok_operators.operator_name, ok_operators.operator_surname, ok_operators.operator_photo, ok_group.group_name AS operator_otdel FROM ok_operators, ok_group WHERE operator_id = {$operator_id} AND ok_group.group_id = ok_operators.operator_otdel"; $result = $mysql->query($sql); if($result->columnCount() == 0){ return false; }else{ return $result->fetch(PDO::FETCH_ASSOC); } } } if(isset($_SESSION['ok_user_id'])){ $obj = new GetUserNewMess($_SESSION['ok_user_id']); session_write_close(); $obj->getNewMessages(); }else die('Error! Не найден пользователь'); ?>
